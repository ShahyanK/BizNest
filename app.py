# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q7d4f7ddQbKxPhiTW94bzXbDywthCGtK
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Load the cleaned dataset
df = pd.read_csv("/content/drive/MyDrive/BizNest/FinalData.csv")

# Define target audience profiles per restaurant type
restaurant_targets = {
    "Bubble Tea": {
        "15 to 29 years": 0.5,
        "Sino-Tibetan languages": 0.2,
        "No religion and secular perspectives": 0.2,
        "Median age of the population": ("low", 25),
    },
    "Halal": {
        "Muslim": 0.2,
        "25 to 44 years": 0.4,
        "Indo-Aryan languages": 0.1,
        "Median age of the population": ("mid", 32),
    },
    "Mexican": {
        "30 to 44 years": 0.3,
        "Italic (Romance) languages": 0.05,
        "No religion and secular perspectives": 0.2,
        "Median age of the population": ("mid", 34),
    },
    "Japanese": {
        "25 to 44 years": 0.4,
        "Japanese": 0.01,
        "No religion and secular perspectives": 0.3,
        "Median age of the population": ("low", 30),
    },
    "Vegan": {
        "25 to 44 years": 0.4,
        "No religion and secular perspectives": 0.3,
        "Bachelor's degree or higher": 0.4,
        "Median age of the population": ("mid", 33),
    },
}

def calculate_fit_score(city_data, restaurant_type):
    profile = restaurant_targets[restaurant_type]
    score = 0
    max_score = 0

    for feature, weight in profile.items():
        try:
            if isinstance(weight, tuple):  # For median age targeting
                direction, target = weight
                median_age = city_data.get("Median age of the population", None)
                if median_age is None:
                    continue
                if direction == "low":
                    if median_age <= target:
                        score += 1
                elif direction == "mid":
                    if abs(median_age - target) <= 5:
                        score += 1
                max_score += 1
            else:
                city_value = city_data.get(feature, 0)
                match_score = min(city_value / weight, 1.0)
                score += match_score
                max_score += 1
        except:
            continue

    return round((score / max_score) * 100, 1) if max_score > 0 else 0

# ----- STREAMLIT APP -----
st.set_page_config(page_title="GTA Business Insights", layout="wide")
st.title("üìç GTA Business Targeting Dashboard")

tab1, tab2 = st.tabs(["City Demographics", "Restaurant Fit & Competition"])

# ----- TAB 1: CITY DEMOGRAPHICS -----
with tab1:
    st.header("Explore Demographics by City")
    city = st.selectbox("Select a city", df["City"].unique())
    city_data = df[df["City"] == city].iloc[0]

    st.subheader("üßì Age Distribution")
    age_cols = ["0 to 14 years", "15 to 29 years", "30 to 44 years", "45 to 64 years", "65 years and over"]
    age_df = pd.DataFrame({col: [round(city_data[col]*100, 1)] for col in age_cols})
    st.bar_chart(age_df)

    st.subheader("üïå Religious Distribution")
    religion_cols = ["Muslim", "Christian", "Hindu", "Jewish", "Sikh", "Buddhist", "No religion and secular perspectives"]
    religion_df = pd.DataFrame({col: [round(city_data.get(col, 0)*100, 1)] for col in religion_cols})
    st.bar_chart(religion_df)

    st.subheader("üìä Median Age")
    if "Median age of the population" in city_data:
        st.metric("Median Age", f"{round(city_data['Median age of the population'], 1)} years")

    st.subheader("üí∞ Median Total Income")
    if "Median total income in 2020 among recipients ($)" in city_data:
        st.metric("Median Income", f"${int(city_data['Median total income in 2020 among recipients ($)']):,}")

# ----- TAB 2: RESTAURANT FIT & COMPETITION -----
with tab2:
    st.header("Restaurant Category Analysis")
    restaurant_type = st.selectbox("Choose a restaurant category", list(restaurant_targets.keys()))
    selected_city = st.selectbox("Choose a city", df["City"].unique())
    city_row = df[df["City"] == selected_city].iloc[0]

    fit_score = calculate_fit_score(city_row, restaurant_type)

    st.write(f"üìç Yelp search results for **{restaurant_type}** in **{selected_city}**")
    st.write("üîç Concentration: [Yelp API Placeholder]")
    st.metric("üéØ Targeting Fit Score", f"{fit_score} / 100")

